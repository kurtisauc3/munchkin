{"version":3,"sources":["utils/socket-io.ts","utils/electron.ts","utils/index.ts","scenes/main-menu.ts","scenes/index.ts","config.ts","game.ts"],"names":[],"mappings":";;;AKAA,ACAA,AHAA,AFcA,ADdA,MCcM,QAAQ,GAAG,CKdD,AHAA,KFcO,CAAC,OAAO,CAAC,KIdI,KJcM,CAAmB,CAAC,WDdxB;AKEtC,ACDA,AHAA,AFeS,ADdT,MKAM,ALAA,EKAE,ALAA,UKAU,ALAA,EKAE,ALAA,GAAG,KCcN,EDda,CKAC,ALAA,EKAE,CLAC,CAAC,CKAC,AFDA,CGAE,MDCK,CAAC,GAAG,CAAC;AAEnC,ACDb,AHAA,AHAA,MMAa,AHAP,AHAA,EKCO,ECDK,IHAH,AHAD,GAAG,CKCM,CCDG,EDC8B,ALDvC,EGAM,EGAS,CAAC,GHAJ,CGAQ,AHAP,KAAK,OHAhB,EAAC,UAAU,EAAE;IKE9B,ACDA,AHAA,AHAA,KKCK,EAAE,ILDI,CMAC,CNAC,IKCI,ALDA,CMA+B;IDEhD,ALDA,IKCI,ACDF,AHAA,EECI,GCDC,AHAA,CGAC,AHAA,AHAE,EKCE,AFDF,AHAE,CKCC,ALDA,EGAA,CGAC,CDCG,ACDF,AHAA,CGAC,MNAQ,CAAC,EGAA,EAAE,CAAC,CAAC;CHC9B,CAAC,CAAC,CKCD,ACDA,AHAA,CGAC,AHAA,IECI,EAAE;ALEA,CMFR,GHCC,IEAE,EFAI,EEAA,EAAE,MAAM,CAAC,KAAK,CAAC,CLCN,EKDS;ACL1B,ANIA,QKEI,AFAA,AHFI,CAAC,EAAE,CAAC,EKEF,EAAE,ICFX,EDEiB,EFAN,CAAC,EAAE,AHFY,CGEX,CHFa,CAAC,KAAK,EGEV,AHFY,EGEV,AHFY,CAAC,EGEV,EAAE,CAAC,EHFc,CAAC,GAAG,CGEX,AHFY,CGEX,GAAG,CAAC,uCHFmD,CGEX,CAAC,AHFY,CGEX,CAAC,GHFe,CAAC,CAAC,CAAC;AME1G,IHCE,CAAC,CGDG,CAAC,CDCH,KAAK,EAAE,QAAQ,ACDI,CDCH,ACDI,MAAM,EAAE,EDCF,CAAC,ACDI,EAAE;CHEpC,GGDC,IDCE,ECDI,IDCE,ACDE,EDCA,CCDG,IAAI,GDCC,CAAC,ACDE,CAAC,UDCQ,CAAC,QCDC,CAAC,CAAC;AACpC,AHES,CGFR,CAAC,CAAC,EDCA,uBFCc;IEAf,KAAK,EAAE,CAAC,iBAAQ,CAAC,CAAC,4BAA4B;CAC/C,CAAC;ADdF,AFAA,8CEA4B,AFAA;AAC5B,6CAA2B","file":"game.4fb5d41c.js","sourceRoot":"../src","sourcesContent":["import { io } from 'socket.io-client';\n\nconst { SERVER_URL } = process.env;\nconst socketIo = io(SERVER_URL, {\n  autoConnect: true, // TODO: remove this\n  transports: ['websocket']\n});\nsocketIo.on('connect_error', (error) => console.log('[socket.io-client] Connect to server error', error));\n\nexport { socketIo };\n","import * as Electron from 'electron';\n\ntype ClientElectron = Pick<\n  typeof Electron,\n  | 'clipboard'\n  | 'contextBridge'\n  | 'crashReporter'\n  | 'desktopCapturer'\n  | 'ipcRenderer'\n  | 'nativeImage'\n  | 'shell'\n  | 'webFrame'\n>;\n\nconst electron = window.require('electron') as ClientElectron;\n\nexport { electron };\n","export * from './socket-io';\nexport * from './electron';\n","import 'Phaser';\nimport { socketIo } from '../utils';\n\nclass MainMenu extends Phaser.Scene {\n  constructor() {\n    super({ key: 'MainMenu' });\n  }\n\n  create() {\n    socketIo.on('connect', () => console.log('[socket.io-client] Connected to server'));\n  }\n}\n\nexport { MainMenu };\n","export * from './main-menu';\n","import { MainMenu } from './scenes';\n\nconst { GAME_WIDTH, GAME_HEIGHT } = process.env;\n\nexport const GameConfig: Phaser.Types.Core.GameConfig = {\n  title: 'Munchkin',\n  type: Phaser.AUTO,\n  scale: {\n    mode: Phaser.Scale.FIT,\n    parent: 'game',\n    width: parseInt(GAME_WIDTH),\n    height: parseInt(GAME_HEIGHT)\n  },\n  scene: [MainMenu] // TODO add more scenes here\n};\n","import 'Phaser';\nimport { GameConfig } from './config';\n\nexport class Game extends Phaser.Game {\n  constructor(config: Phaser.Types.Core.GameConfig) {\n    super(config);\n  }\n}\n\nwindow.addEventListener('load', () => {\n  const game = new Game(GameConfig);\n});\n"]}